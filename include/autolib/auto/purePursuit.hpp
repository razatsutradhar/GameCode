#pragma once
#include "autolib/util/messages.hpp"
#include "autolib/auto/pathGenerator.hpp"
#include "autolib/auto/purePursuitMath.hpp"
#include "okapi/api/units/QLength.hpp"
#include "okapi/api/units/RQuantity.hpp"
#include <memory>
#include <vector>
#include <cmath>
//*

#define DEBUG

namespace autolib{

class PurePursuit {
    public:


    /**
     * PurePursuit 
     * This is the constructor for PurePursuit. The first param is an InternalPath which should be generated by
     * PathGenerator's getPath() method. The second param is the lookaheadDistance of the Pure Pursuit algorithm.
     * 
     * @param  {InternalPath} ipath                : 
     *  example: pathGenerator.getPath()
     * @param  {okapi::QLength} ilookaheadDistance : 
     *  example: 1_ft
     */
    PurePursuit( const InternalPath &ipath, const okapi::QLength &ilookaheadDistance );

    /**
     * This should be run in a loop during your autonomous. The input is the x, y, and theta in global coordinates 
     * of where your robot is currently located. This can be calculated using okapi's odometry feature. To access
     * that feature go the the feature/odometry branch on github until the official release of it.
     * 
     * @param  {okapi::QLength} ix    : 
     *  example: exampleVariable * foot
     * @param  {okapi::QLength} iy    :
     *  example: exampleVariable * inch 
     * @param  {okapi::QAngle} itheta :
     *  example: exampleVariable * degree
     * @return {Curvature}            :
     *  example: ask me
     */
    Curvature getGoalCurvature( const okapi::QLength &ix , const okapi::QLength &iy, const okapi::QAngle &itheta );

    protected:
    const bool debug = true;
    InternalPath path;
    InternalPath possiblePoints;
    InternalPoint currentPoint{0,0};
    InternalPoint nearestPoint{0,0};
    InternalPoint lastNearestPoint{0,0};
    InternalPoint goalPoint{0,0};
    InternalPoint localGoalPoint{0,0};
    double lookaheadDistance;
    double theta;
    bool checkLastPointBool = true;
    
    /**
     * 
     * @param  {okapi::QLength} ix : 
     * @param  {okapi::QLength} iy : 
     * @return {InternalPoint}     : 
     */
    InternalPoint getNearestPoint( const okapi::QLength &ix , const okapi::QLength &iy );
};

}//autolib
//*/
